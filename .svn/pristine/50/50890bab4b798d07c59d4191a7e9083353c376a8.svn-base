package net.iclassmate.xydspace.adapter;

import android.content.Context;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.os.Environment;
import android.os.Handler;
import android.util.LruCache;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.TextView;

import com.jauker.widget.BadgeView;
import com.squareup.picasso.Picasso;

import net.iclassmate.xydspace.R;
import net.iclassmate.xydspace.bean.message.SpaceMessage;
import net.iclassmate.xydspace.constant.Constant;
import net.iclassmate.xydspace.utils.ChatMessageUtil;
import net.iclassmate.xydspace.utils.FileUtils;
import net.iclassmate.xydspace.view.study.ShapeImageView;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;

import io.rong.imlib.RongIMClient;
import io.rong.imlib.model.Conversation;
import io.rong.imlib.model.Message;
import io.rong.imlib.model.MessageContent;
import io.rong.message.ImageMessage;
import io.rong.message.TextMessage;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * Created by xyd on 2016/6/1.
 */
public class MessageFragmentAdapter extends BaseAdapter {
    private List<Conversation> messageList;
    private Context mContext;
    private String id;
    private String name;
    private SharedPreferences sp;
    private int emotion_map_type = 0x0001;
    private Handler mHandler = new Handler();
    private LruCache<String, String> lruCache;

    public MessageFragmentAdapter(List<Conversation> messageList, Context context) {
        this.messageList = messageList;
        this.mContext = context;
        sp = mContext.getSharedPreferences(Constant.SHARED_PREFERENCES, Context.MODE_PRIVATE);
        int maxMemory = (int) Runtime.getRuntime().maxMemory();
        int mCacheSize = maxMemory / 8;
        lruCache = new LruCache<String, String>(mCacheSize) {
            @Override
            protected int sizeOf(String key, String value) {
                return value.getBytes().length;
            }
        };
    }

    @Override
    public int getCount() {
        return messageList.size();
    }

    @Override
    public Object getItem(int position) {
        return messageList.get(position);
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        ViewHolder holder = null;
        if (convertView == null) {
            convertView = LayoutInflater.from(mContext).inflate(R.layout.chat_list_view, null);
            holder = new ViewHolder();
            holder.name = (TextView) convertView.findViewById(R.id.chat_list_name);
            holder.messageTextView = (TextView) convertView.findViewById(R.id.chat_list_message);
            holder.icon = (ShapeImageView) convertView.findViewById(R.id.chat_list_icon);
            holder.tv_time = (TextView) convertView.findViewById(R.id.chat_list_time);
            holder.badgeView = (BadgeView) convertView.findViewById(R.id.chat_badgeview);
            convertView.setTag(holder);
        } else {
            holder = (ViewHolder) convertView.getTag();
        }
        Conversation msg = messageList.get(position);
        setHeadIcon(msg.getTargetId(), msg.getConversationType().getValue(), holder.icon);

        holder.icon.setTag(position);
        holder.name.setText("");
        holder.name.setTag(msg.getTargetId());
        String name = lruCache.get(msg.getTargetId());
        if (name == null || name.equals("") || name.equals("null")) {
            //获取个人备注名
            getUserName(1, msg.getTargetId(), holder.name, holder.icon);
        } else {
            holder.name.setText(name);
        }

        //获取群组名
        name = holder.name.getText().toString().trim();
        if (name == null || name.equals("")) {
            getUserName(2, msg.getTargetId(), holder.name, holder.icon);
        }

        holder.messageTextView.setText("");
        final ViewHolder finalHolder = holder;
        final ViewHolder finalHolder1 = holder;
        final ViewHolder finalHolder2 = holder;
        int latestMessageId = msg.getLatestMessageId();
        if (latestMessageId == 0) {
            MessageContent latestMessage = msg.getLatestMessage();
            if (latestMessage instanceof TextMessage || latestMessage instanceof SpaceMessage) {
                String info = null;
                if (latestMessage instanceof TextMessage) {
                    info = ((TextMessage) latestMessage).getContent();
                } else if (latestMessage instanceof SpaceMessage) {
                    info = ((SpaceMessage) latestMessage).getContent();
                }
                if (info != null && !info.equals("")) {
                    try {
                        JSONObject json = new JSONObject(info);
                        String content = json.optString("Content");
                        String filename = json.optString("FileName");
                        long time = json.optLong("CreateTime");
                        if (time <= 0) {
                            long t1 = msg.getReceivedTime();
                            long t2 = msg.getSentTime();
                            if (t1 > t2) {
                                time = t1;
                            } else {
                                time = t2;
                            }
                        }
                        if (time > 0) {
                            finalHolder1.tv_time.setText(FileUtils.getTime(time + ""));
                        } else {
                            finalHolder1.tv_time.setText(FileUtils.getTime(System.currentTimeMillis() + ""));
                        }
                        int contentType = json.optInt("ContentType");
                        if (!filename.equals("")) {
                            contentType = FileUtils.getContentType(filename);
                        }
                        ChatMessageUtil chat = new ChatMessageUtil();
                        chat.setMessageView(contentType, finalHolder2.messageTextView, content, mContext);
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            } else if (latestMessage instanceof ImageMessage) {
                finalHolder.messageTextView.setText("[图片]");
                long time = 0;
                long t1 = msg.getReceivedTime();
                long t2 = msg.getSentTime();
                if (t1 > t2) {
                    time = t1;
                } else {
                    time = t2;
                }
                if (time > 0) {
                    finalHolder1.tv_time.setText(FileUtils.getTime(time + ""));
                } else {
                    finalHolder1.tv_time.setText(FileUtils.getTime(System.currentTimeMillis() + ""));
                }
            }
        } else {
            RongIMClient.getInstance().getMessage(latestMessageId, new RongIMClient.ResultCallback<Message>() {
                @Override
                public void onSuccess(Message message) {
                    if (message.getContent() instanceof TextMessage || message.getContent() instanceof SpaceMessage) {
                        String info = null;
                        if (message.getContent() instanceof TextMessage) {
                            TextMessage textMessage = (TextMessage) message.getContent();
                            info = textMessage.getContent();
                        } else if (message.getContent() instanceof SpaceMessage) {
                            SpaceMessage spaceMessage = (SpaceMessage) message.getContent();
                            info = spaceMessage.getContent();
                        }
                        if (info != null && !info.equals("")) {
                            try {
                                JSONObject json = new JSONObject(info);
                                String content = json.optString("Content");
                                String filename = json.optString("FileName");
                                long time = json.optLong("CreateTime");
                                int messageType = json.optInt("MessageType");

                                if (time > 0) {
                                    finalHolder1.tv_time.setText(FileUtils.getTime(time + ""));
                                } else {
                                    finalHolder1.tv_time.setText(FileUtils.getTime(System.currentTimeMillis() + ""));
                                }
                                if (messageType == 0) {
                                    int contentType = json.optInt("ContentType");
                                    if (!filename.equals("")) {
                                        contentType = FileUtils.getContentType(filename);
                                    }
                                    ChatMessageUtil chat = new ChatMessageUtil();
                                    chat.setMessageView(contentType, finalHolder2.messageTextView, content, mContext);
                                } else if (messageType == 10) {
                                    String requestName = json.getString("requestName");
                                    String name = sp.getString(Constant.USER_NAME, "");
                                    if (requestName != null) {
                                        if (requestName.equals(name)) {
                                            finalHolder2.messageTextView.setText("你" + mContext.getResources().getString(R.string.revoke_message));
                                        } else {
                                            finalHolder2.messageTextView.setText(requestName + mContext.getResources().getString(R.string.revoke_message));
                                        }
                                    }
                                }
                            } catch (JSONException e) {
                                e.printStackTrace();
                            }
                        }
                    } else if (message.getContent() instanceof ImageMessage) {
                        finalHolder.messageTextView.setText("[图片]");
                        long time = 0;
                        long t1 = message.getReceivedTime();
                        long t2 = message.getSentTime();
                        if (t1 > t2) {
                            time = t1;
                        } else {
                            time = t2;
                        }
                        if (time > 0) {
                            finalHolder1.tv_time.setText(FileUtils.getTime(time + ""));
                        } else {
                            finalHolder1.tv_time.setText(FileUtils.getTime(System.currentTimeMillis() + ""));
                        }
                    }
                }

                @Override
                public void onError(RongIMClient.ErrorCode errorCode) {

                }
            });
        }
        holder.badgeView.setBadgeCount(msg.getUnreadMessageCount());
        return convertView;
    }

    private void setHeadIcon(String targetId, int type, ShapeImageView icon) {
        String iconUrl = String.format(Constant.STUDY_GET_USER_PIC, targetId);
        if (type == 1) {
            Picasso.with(mContext).load(iconUrl).resize((int) mContext.getResources().getDimension(R.dimen.view_43),
                    (int) mContext.getResources().getDimension(R.dimen.view_43))
                    .placeholder(R.mipmap.moren_geren_xiaoxi).error(R.mipmap.moren_geren_xiaoxi).config(Bitmap.Config.RGB_565).into(icon);
        } else if (type == 2) {
            Picasso.with(mContext).load(iconUrl).resize((int) mContext.getResources().getDimension(R.dimen.view_43),
                    (int) mContext.getResources().getDimension(R.dimen.view_43))
                    .placeholder(R.mipmap.ic_qunzu_xuanren).error(R.mipmap.ic_qunzu_xuanren).config(Bitmap.Config.RGB_565).into(icon);
        } else if (type == 3) {
            Picasso.with(mContext).load(iconUrl).resize((int) mContext.getResources().getDimension(R.dimen.view_43),
                    (int) mContext.getResources().getDimension(R.dimen.view_43))
                    .placeholder(R.mipmap.ic_qunliao).error(R.mipmap.ic_qunliao).config(Bitmap.Config.RGB_565).into(icon);
        }
    }

    //type用于区分单聊还是群聊以获取会话名称  1单聊 2群聊
    private void getUserName(final int type, final String targetId, final TextView textView, final ShapeImageView icon) {
        String result = "";
        new Thread(new Runnable() {
            @Override
            public void run() {
                String url = "";
                if (type == 1) {
                    String uid = sp.getString(Constant.ID_USER, "");
                    url = String.format(Constant.MESSAGE_FIND_REMARK_NAME, uid, targetId);
                } else if (type == 2) {
                    url = String.format(Constant.MESSAGE_GET_SESSION_NAME, targetId);
                }
                OkHttpClient client = new OkHttpClient();
                Request request = new Request.Builder()
                        .url(url)
                        .build();
                client.newCall(request).enqueue(new Callback() {
                    @Override
                    public void onFailure(Call call, IOException e) {

                    }

                    @Override
                    public void onResponse(Call call, Response response) throws IOException {
                        if (response.isSuccessful()) {
                            final String result = response.body().string();
                            mHandler.post(new Runnable() {
                                @Override
                                public void run() {
                                    String tag = (String) textView.getTag();
                                    int sessionType = 2;
                                    if (tag.equals(targetId)) {
                                        String sname = result;
                                        if (type == 1) {
                                            try {
                                                JSONObject object = new JSONObject(sname);
                                                sname = object.optString("remark");
                                            } catch (JSONException e) {
                                                e.printStackTrace();
                                            }
                                        } else if (type == 2) {
                                            try {
                                                JSONObject object = new JSONObject(sname);
                                                sname = object.optString("sessionName");
                                                if (sname == null) {
                                                    sname = "";
                                                }
                                            } catch (JSONException e) {
                                                e.printStackTrace();
                                            }
                                        }
                                        if (sname != null) {
                                            textView.setText(sname);
                                            lruCache.put(tag, sname);
                                        }
                                    }
                                }
                            });
                        }
                    }
                });
            }
        }).start();
    }


    public void clean() {
        for (int i = 0; i < messageList.size(); i++) {
            Conversation conversation = messageList.get(i);
            String targetId = conversation.getTargetId();
            String ret = lruCache.get(targetId);
            if (ret != null) {
                lruCache.remove(targetId);
            }
        }
    }

    public void writeFileData(String fileName, String message) {
        try {
            File file = new File(Environment.getExternalStorageDirectory()
                    .getAbsolutePath(), fileName);
            FileOutputStream fout = new FileOutputStream(file);
            System.out.println(message);
            byte[] bytes = message.getBytes();
            fout.write(bytes);
            fout.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private class ViewHolder {
        ShapeImageView icon;
        public TextView messageTextView, name, tv_time;
        BadgeView badgeView;
    }

}
