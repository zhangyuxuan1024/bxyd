package net.iclassmate.xydspace.ui.activity.chat;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentTransaction;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ListView;

import net.iclassmate.xydspace.R;
import net.iclassmate.xydspace.bean.contacts.GroupMember;
import net.iclassmate.xydspace.constant.Constant;
import net.iclassmate.xydspace.ui.fragment.emotion.EmotionDisFragment;
import net.iclassmate.xydspace.utils.HttpManager;
import net.iclassmate.xydspace.utils.NetWorkUtils;
import net.iclassmate.xydspace.utils.SendLastMessage;
import net.iclassmate.xydspace.utils.UIUtils;
import net.iclassmate.xydspace.view.TitleBar;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

import io.rong.imlib.model.Conversation;
import io.rong.imlib.model.MessageContent;
import io.rong.message.TextMessage;

public class DiscussionActivity extends FragmentActivity implements TitleBar.TitleOnClickListener, SendLastMessage {
    private Context mContext;
    private TitleBar titleBar;
    private ListView messageBody;
    private String from, targetId, sessionName, author, sessionIcon;
    private LinearLayout ll_discussion;
    private Conversation message;
    private Conversation.ConversationType type;
    private EmotionDisFragment emotionDisFragment;
    private SharedPreferences sp;
    private String result_group;
    private HttpManager httpManager;
    private Boolean get_group_name; //是否获取群组名称和群主ID
    private ArrayList<GroupMember> list;
    private Boolean isInternet = false; //是否有网络
    public static final int RESULT_GROUP_NAME_SUCCEED = 0;
    public static final int RESULT_GROUP_NAME_FAIL = 1;

    public static final int FIND_GROUP_MEMBER_SUCCEED = 2;  //获取群组成员成功

    //最后一条消息的id
    private int last_message_id;
    Handler handler = new Handler() {
        @Override
        public void handleMessage(android.os.Message msg) {
            switch (msg.what) {
                case RESULT_GROUP_NAME_SUCCEED:
                    //修改标题
                    try {
                        JSONObject object = new JSONObject(sessionName);
                        sessionName = object.getString("sessionName");
                        author = object.getString("author");
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    Log.i("TAG", "当前群组的名称是：" + sessionName);
                    titleBar.setTitle(sessionName);
                    break;

                case FIND_GROUP_MEMBER_SUCCEED:
                    Intent intent = new Intent(UIUtils.getContext(), ChatInformationActivity.class);
                    intent.putExtra("from", "group");
                    intent.putExtra("targetId", targetId);
                    intent.putExtra("sessionName", sessionName);
                    intent.putExtra("author", author);
                    intent.putExtra("isInternet", isInternet);
                    Bundle bundle = new Bundle();
                    bundle.putSerializable("list", list);
                    intent.putExtra("bundle", bundle);
                    startActivity(intent);
                    break;
            }
        }
    };

    /**
     * 软键盘和表情图的隐藏
     *
     * @param view 跟布局
     * @author LvZhangFeng
     * @time 2016年8月6日17点
     */
    public void setupUI(View view) {
        if (!(view instanceof EditText)) {
            view.setOnTouchListener(new View.OnTouchListener() {
                public boolean onTouch(View v, MotionEvent event) {
                    emotionDisFragment.mkeyboard.hideEmotionLayout(false);
                    emotionDisFragment.mkeyboard.hideSoftInput();
                    return false;
                }
            });
        }

        if (view instanceof ViewGroup) {
            for (int i = 0; i < ((ViewGroup) view).getChildCount(); i++) {
                View innerView = ((ViewGroup) view).getChildAt(i);
                setupUI(innerView);
            }
        }
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        setContentView(R.layout.activity_discussion);
        mContext = this;
        initView();
        setupUI(ll_discussion);
        initData();
        userAddGroup();
        initEmotionMainFragment();
        emotionDisFragment.setSendLastMessage(this);

    }

    private void initView() {
        titleBar = (TitleBar) findViewById(R.id.discussion_title_bar);
        titleBar.setLeftIcon(R.mipmap.ic_fanhui, "消息");
        titleBar.setRightIcon(R.mipmap.ic_qunxiangqing);
        titleBar.setTitleClickListener(this);
        titleBar.setRightVisibility(View.INVISIBLE);
        ll_discussion = (LinearLayout) findViewById(R.id.ll_discussion);

        messageBody = (ListView) findViewById(R.id.discussion_messagebody);
    }

    /**
     * 把当前用户加入到该群中，这样才能群聊
     */
    public void userAddGroup() {
        sp = this.getSharedPreferences(Constant.SHARED_PREFERENCES, Context.MODE_PRIVATE);
        String userId = sp.getString(Constant.ID_USER, "");
        String name = sp.getString("name", "");
        final List<String> userIdList = new ArrayList<>();
        final List<String> userNameList = new ArrayList<>();
        userIdList.add(userId);
        userNameList.add(name);
        httpManager = new HttpManager();
        new Thread(new Runnable() {
            @Override
            public void run() {
                result_group = "";
                try {
                    result_group = httpManager.addGroup(targetId, sessionName, userIdList, userNameList);
                    if (result_group == null || result_group.equals("404")) {
                        Log.i("TAG", "user加入群组失败");
                    } else {
                        Log.i("TAG", "user加入群组成功" + result_group.toString());
                    }
                } catch (Exception e) {

                }
            }
        }).start();

        //获取群聊名称
        if (get_group_name) {
            new Thread(new Runnable() {
                @Override
                public void run() {
                    sessionName = null;
                    sessionName = httpManager.findSessionName(targetId);
                    if (sessionName.equals("404")) {
                        Log.i("TAG", "获取群组名称失败");
                        handler.sendEmptyMessage(RESULT_GROUP_NAME_FAIL);
                    } else {
                        Log.i("TAG", "获取群组名称成功");
                        handler.sendEmptyMessage(RESULT_GROUP_NAME_SUCCEED);
                    }
                }
            }).start();
        }
    }

    private void initData() {
        type = Conversation.ConversationType.GROUP;
        from = getIntent().getStringExtra("from");
        if (from.equals("MessageFragment")) {
            get_group_name = true;
            message = getIntent().getParcelableExtra("message");
            targetId = message.getTargetId();
//            titleBar.setTitle(discussion.getName());
            MessageContent latestMessage = message.getLatestMessage();
            if (latestMessage instanceof TextMessage) {
                TextMessage textMessage = (TextMessage) latestMessage;
//                titleBar.setTitle(textMessage.getUserInfo().getName());

                Log.i("TAG", "从MessageFragment进入到群聊，title=" + textMessage.getUserInfo().getName());
            }
        } else if (from.equals("SelectContactsActivity")) {
            get_group_name = false;
            targetId = getIntent().getStringExtra("sessionId");
            sessionName = getIntent().getStringExtra("sessionName");
            author = getIntent().getStringExtra("author");
            titleBar.setTitle(sessionName);
        } else if (from.equals("FriendInformationActivity")) {
            get_group_name = false;
            sessionName = getIntent().getStringExtra("sessionName");
            targetId = getIntent().getStringExtra("sessionId");
            author = getIntent().getStringExtra("author");
            sessionIcon = getIntent().getStringExtra("sessionIcon");
            titleBar.setTitle(sessionName);
        }
//        Log.e("-------", from + "targetId:" + targetId + ",groupName:" + sessionName);
        messageBody.setSelection(messageBody.getBottom());
    }

    private void initEmotionMainFragment() {
        //构建传递参数
        Bundle bundle = new Bundle();
        //绑定主内容编辑框
        bundle.putBoolean(EmotionDisFragment.BIND_TO_EDITTEXT, true);
        //隐藏控件
        bundle.putBoolean(EmotionDisFragment.HIDE_BAR_EDITTEXT_AND_BTN, false);
        //传递消息参数

        bundle.putString("targetId", targetId);
        bundle.putSerializable("type", type);

        //替换fragment
        //创建修改实例
        emotionDisFragment = EmotionDisFragment.newInstance(EmotionDisFragment.class, bundle);
        emotionDisFragment.bindToContentView(messageBody);
        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
        emotionDisFragment.setSessionId(targetId, sessionName);
        transaction.replace(R.id.discussion_fl_emotionview_main, emotionDisFragment);
        transaction.addToBackStack(null);
        //提交修改
        transaction.commit();
    }

    @Override
    public void leftClick() {
        close();
    }

    @Override
    public void onBackPressed() {
        close();
    }

    private void close() {
        Intent intent = new Intent();
        setResult(RESULT_OK, intent);
        intent.putExtra("update", true);
        finish();
    }

    @Override
    public void rightClick() {
        list = new ArrayList<>();
        new Thread(new Runnable() {
            @Override
            public void run() {
                if (NetWorkUtils.isNetworkAvailable(UIUtils.getContext())) {
                    isInternet = true;
                    list = httpManager.findGroupMember(targetId);
                    String userId = sp.getString(Constant.ID_USER, "");

                    if (null != list || list.size() != 0) {
                        if (userId.equals(author)) {
                            GroupMember groupMember = new GroupMember("add", "");
                            GroupMember groupMember2 = new GroupMember("exit", "");
                            list.add(groupMember);
                            list.add(groupMember2);
                        } else {
                            GroupMember groupMember = new GroupMember("add", "");
                            list.add(groupMember);
                        }
                        handler.sendEmptyMessage(FIND_GROUP_MEMBER_SUCCEED);
                    }
                } else {
                    isInternet = false;
                }
            }
        }).start();

    }

    @Override
    public void titleClick() {

    }

    @Override
    public void innerleftClick() {

    }

    @Override
    public void innerRightClick() {

    }

    @Override
    public void sendMessageId(int msgId) {
        last_message_id = msgId;
    }
}
