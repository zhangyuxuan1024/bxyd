package net.iclassmate.xydspace.ui.activity.constacts;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.drawable.AnimationDrawable;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.Toast;

import com.squareup.picasso.Picasso;

import net.iclassmate.xydspace.R;
import net.iclassmate.xydspace.adapter.SeleContAdapter;
import net.iclassmate.xydspace.bean.contacts.FriendInfo;
import net.iclassmate.xydspace.bean.contacts.GroupMember;
import net.iclassmate.xydspace.constant.Constant;
import net.iclassmate.xydspace.ui.activity.chat.SelectContactsActivity;
import net.iclassmate.xydspace.ui.activity.teachlearn.DeleteActivity;
import net.iclassmate.xydspace.utils.HttpManager;
import net.iclassmate.xydspace.utils.NetWorkUtils;
import net.iclassmate.xydspace.utils.UIUtils;
import net.iclassmate.xydspace.view.TitleBar;
import net.iclassmate.xydspace.view.study.ShapeImageView;
import net.sourceforge.pinyin4j.PinyinHelper;
import net.sourceforge.pinyin4j.format.HanyuPinyinCaseType;
import net.sourceforge.pinyin4j.format.HanyuPinyinOutputFormat;
import net.sourceforge.pinyin4j.format.HanyuPinyinToneType;
import net.sourceforge.pinyin4j.format.HanyuPinyinVCharType;
import net.sourceforge.pinyin4j.format.exception.BadHanyuPinyinOutputFormatCombination;

import java.util.ArrayList;
import java.util.List;


/**
 * 群组踢人界面
 * Created by xyd on 2016/8/10.
 */
public class SelectSortActivity extends Activity implements TitleBar.TitleOnClickListener, View.OnClickListener
{
    private TitleBar titleBar;
    private ListView listView;
    private List<Object> list;
    private List<FriendInfo> listMsg;
    private List<FriendInfo> listSelect;
    private List<String> userIdList;
    private List<String> userNameList;
    private List<GroupMember> groupList;
    private LinearLayout linear_select;
    private RelativeLayout relative_group;
    private HorizontalScrollView horizontalScrollView;
    private ImageView iv_select_loading;

    private SharedPreferences sp;
    private AnimationDrawable anim;
    private char sortKey;
    private HttpManager httpManager;
//    private Loading loading;
    private SeleContAdapter adapter;
    private String result;
    private String author, targetId;

    private static final int NO_INTERNET = 0;   //没网
    private static final int EXIT_GROUP_MEMBER_SUCCEED = 1; //群主踢人成功
    private static final int EXIT_GROUP_MEMBER_FAIL = 2; //群主踢人失败

    Handler handler = new Handler(){
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            switch(msg.what){
                case NO_INTERNET:
                    Toast.makeText(UIUtils.getContext(),"您当前没有连接网络，请连接后重试！",Toast.LENGTH_SHORT).show();
                    break;

                case EXIT_GROUP_MEMBER_SUCCEED:
                    Toast.makeText(UIUtils.getContext(),"这"+listSelect.size()+"人被您踢出了群聊！",Toast.LENGTH_SHORT).show();
                    Intent intent = getIntent();
                    intent.putExtra("ExitGroup","ExitSucceed");
                    setResult(14, intent);
                    SelectSortActivity.this.finish();
                    break;

                case EXIT_GROUP_MEMBER_FAIL:
                    break;
            }
        }
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_select_sort);

        initView();
        initData();
    }

    private void initView() {
        titleBar = (TitleBar) findViewById(R.id.select_sort_title_bar);

        titleBar.setLeftIcon(R.mipmap.ic_fanhui, "取消");
        titleBar.setRightIcon("删除");
        titleBar.setTitle("删除成员");
        titleBar.setTitleClickListener(this);
        listView = (ListView) findViewById(R.id.sele_sort_listview);
        linear_select = (LinearLayout) findViewById(R.id.sele_sort_container_linear);
        relative_group = (RelativeLayout) findViewById(R.id.sele_sort_group);
        horizontalScrollView = (HorizontalScrollView) findViewById(R.id.sele_sort_horizontalscrollview);
        iv_select_loading = (ImageView)findViewById(R.id.iv_select_loading);

        anim = (AnimationDrawable) iv_select_loading.getBackground();

        httpManager = new HttpManager();
        sp = SelectSortActivity.this.getSharedPreferences(Constant.SHARED_PREFERENCES, Context.MODE_PRIVATE);
        list = new ArrayList<>();
        listMsg = new ArrayList<>();
        listSelect = new ArrayList<>();
        groupList = new ArrayList<>();
        adapter = new SeleContAdapter(SelectSortActivity.this, list);
        listView.setAdapter(adapter);

        adapter.setImgCheckImg(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                int index = (int) view.getTag();
                Object object = list.get(index);
                if (object instanceof FriendInfo) {
                    FriendInfo message = (FriendInfo) object;
                    message.check = !message.check;
                    list.set(index, message);
                    adapter.notifyDataSetChanged();
                    getSelectCount();
                }
            }
        });
    }

    public void initData()
    {
//        loading.showLoading(false);
        iv_select_loading.setVisibility(View.VISIBLE);
        anim.start();
        author = getIntent().getStringExtra("author");
        targetId = getIntent().getStringExtra("targetId");
        groupList = (ArrayList)getIntent().getSerializableExtra("groupList");
        Log.e("SelectSortActivity", "群组成员groupList：" +groupList.size()+"个"+ groupList.toString());
        String userId = sp.getString(Constant.ID_USER, "");

        for(int i = 0; i < groupList.size(); i++)
        {
            GroupMember groupMember = groupList.get(i);
            if(groupMember.getUserId().equals(userId) || groupMember.getUserId().equals("add") || groupMember.getUserId().equals("exit"))
            {
                continue;
            }else
            {
                FriendInfo friendInfo = new FriendInfo(groupList.get(i));
                listMsg.add(friendInfo);
            }
        }
        initSort();
    }

    /**
     * 按大写字母排序
     */
    public void initSort()
    {
        Log.e("SelectSortActivity", "群组成员listMsg：" + listMsg.size()+"个"+listMsg.toString());
        for (int j = 0; j < listMsg.size(); j++) {
            Log.e("----------------", j + "");
            FriendInfo friendInfo = listMsg.get(j);
            String remark = friendInfo.getRemark();
            if (remark == null || remark.equals("")) {
                remark = friendInfo.getUserName();
            }
            char ch = ' ';
            if (SelectContactsActivity.isEnglish(remark)) {
                //字母
                ch = remark.toUpperCase().charAt(0);

            } else {
                //中文
                char[] c = remark.toCharArray();
                HanyuPinyinOutputFormat format = new HanyuPinyinOutputFormat();
                // UPPERCASE：大写  (ZHONG)LOWERCASE：小写  (zhong)
                format.setCaseType(HanyuPinyinCaseType.UPPERCASE);
                format.setToneType(HanyuPinyinToneType.WITH_TONE_MARK);
                format.setVCharType(HanyuPinyinVCharType.WITH_U_UNICODE);
                try {
                    String[] pinyin = PinyinHelper.toHanyuPinyinStringArray(c[0], format);
                    if (pinyin.length != 0) {
                        char[] cc = pinyin[0].toCharArray();
                        ch = cc[0];
                    }

                } catch (BadHanyuPinyinOutputFormatCombination badHanyuPinyinOutputFormatCombination) {
                    badHanyuPinyinOutputFormatCombination.printStackTrace();
                }
            }
            if (ch >= 65 && ch <= 90) {//大写字母
                friendInfo.sortKey = ch;
            } else {
                friendInfo.sortKey = '#';
            }

            if (sortKey != friendInfo.sortKey) {
                sortKey = friendInfo.sortKey;
                friendInfo.isHead = true;
            }
            for (int k = j - 1; k >= 0; k--) {
                if (ch == listMsg.get(k).sortKey) {
                    friendInfo.isHead = false;
                }
            }
            listMsg.set(j, friendInfo);
        }
        for (int j = 0; j < listMsg.size(); j++) {
            for (int k = j + 1; k < listMsg.size(); k++) {
                FriendInfo f1 = listMsg.get(j);
                FriendInfo f2 = listMsg.get(k);
                if (f1.sortKey > f2.sortKey) {
                    listMsg.set(k, f1);
                    listMsg.set(j, f2);
                }
            }
            FriendInfo message = listMsg.get(j);
            if (!list.contains(message)) {
                list.add(message);
            }
        }
        adapter.notifyDataSetChanged();
        anim.stop();
        iv_select_loading.setVisibility(View.GONE);
    }

    private void getSelectCount() {
        listSelect.clear();
        int count = 0;
        for (int i = 0; i < list.size(); i++) {
            Object object = list.get(i);
            if (object instanceof FriendInfo) {
                FriendInfo message = (FriendInfo) object;
                if (message.check) {
                    count++;
                    listSelect.add(message);
                }
            }
        }
        if (count == 0) {
            titleBar.setRightIcon("删除");
            linear_select.setVisibility(View.GONE);
        } else if (count > 0) {
            titleBar.setRightIcon("删除(" + count + ")");
            linear_select.setVisibility(View.VISIBLE);
        }
        linear_select.removeAllViews();
        for (int i = 0; i < listSelect.size(); i++) {
            String url = "http://123.56.224.241:10000/fs/api/v1/" + listSelect.get(i).getFriendId() + "/getImage/0";
            View view = LayoutInflater.from(this).inflate(R.layout.tra_fri_select_linear_item, null);
            ShapeImageView img = (ShapeImageView) view.findViewById(R.id.tra_fri_select_img);
            Picasso.with(this).load(url).resize(106, 106).into(img);
//            view.setTag(url);
         /*   if (url != null && !url.equals("")) {
                String icon = BitmapUtils.getImageUrl(url);
                Bitmap bitmap = BitmapUtils.stringtoBitmap(icon);
                img.setImageBitmap(bitmap);
            }*/
            linear_select.addView(view);
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if(resultCode == 15)
        {
            if(data.getStringExtra("YesNo").equals("Yes")){
                exitGroupMember();
            }
        }
    }

    @Override
    public void onClick(View v) {

    }

    @Override
    public void leftClick() {
        close();
    }

    private void close()
    {
        Intent intent = getIntent();
        setResult(RESULT_OK, intent);
        finish();
    }

    @Override
    public void rightClick() {
        if(listSelect.size() > 0)
        {
            Intent intent = new Intent(UIUtils.getContext(), DeleteActivity.class);
            intent.putExtra("from", "SelectSortActivity");
            startActivityForResult(intent, 15);
        }else
        {
            Toast.makeText(UIUtils.getContext(),"请选择要踢出群的人",Toast.LENGTH_SHORT).show();
        }
    }

    /**
     * 群主踢人
     * @author LvZhanFeng
     * @time 2016/8/12
     */
    private void exitGroupMember()
    {
        new Thread(new Runnable() {
            @Override
            public void run() {
                if(NetWorkUtils.isNetworkAvailable(UIUtils.getContext()))
                {
                    result = null;
                    userIdList = new ArrayList<String>();
                    userNameList = new ArrayList<String>();
                    for(FriendInfo friendInfo : listSelect)
                    {
                        String userId = friendInfo.getFriendId();
                        String userName = friendInfo.getUserName();
                        userIdList.add(userId);
                        userNameList.add(userName);
                    }
                    result = httpManager.exitGroup(targetId, userIdList, userNameList);
                    if(result.equals("404")){
                        handler.sendEmptyMessage(EXIT_GROUP_MEMBER_FAIL);
                    }else{
                        handler.sendEmptyMessage(EXIT_GROUP_MEMBER_SUCCEED);
                    }
                }else
                {
                    handler.sendEmptyMessage(NO_INTERNET);
                }
            }
        }).start();
    }

    @Override
    public void titleClick() {

    }

    @Override
    public void innerleftClick() {

    }

    @Override
    public void innerRightClick() {

    }

}


