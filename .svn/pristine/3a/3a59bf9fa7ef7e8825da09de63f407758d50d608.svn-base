package net.iclassmate.xydspace.ui.fragment;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.baoyz.swipemenulistview.SwipeMenu;
import com.baoyz.swipemenulistview.SwipeMenuCreator;
import com.baoyz.swipemenulistview.SwipeMenuItem;
import com.baoyz.swipemenulistview.SwipeMenuListView;
import com.jauker.widget.BadgeView;
import com.umeng.analytics.MobclickAgent;

import net.iclassmate.xydspace.R;
import net.iclassmate.xydspace.adapter.MessageFragmentAdapter;
import net.iclassmate.xydspace.bean.message.SpaceMessage;
import net.iclassmate.xydspace.constant.Constant;
import net.iclassmate.xydspace.rongCloud.RongCloudContext;
import net.iclassmate.xydspace.ui.activity.BacklogActivity;
import net.iclassmate.xydspace.ui.activity.chat.ChatActivity;
import net.iclassmate.xydspace.ui.activity.chat.DiscussionActivity;
import net.iclassmate.xydspace.ui.activity.chat.ReceiverMessage;
import net.iclassmate.xydspace.ui.fragment.emotion.EmotionMainFragment;
import net.iclassmate.xydspace.utils.DataCallback;
import net.iclassmate.xydspace.utils.MessageCallback;
import net.iclassmate.xydspace.utils.NetWorkUtils;
import net.iclassmate.xydspace.utils.PopWindowUtils;
import net.iclassmate.xydspace.utils.UIUtils;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

import io.rong.imlib.RongIMClient;
import io.rong.imlib.model.Conversation;
import io.rong.imlib.model.Message;
import io.rong.imlib.model.MessageContent;
import io.rong.message.ImageMessage;
import io.rong.message.TextMessage;

/**
 * A simple {@link Fragment} subclass.
 */
public class MessageFragment extends Fragment implements MessageCallback, DataCallback {
    private Context mContext;
    private String targetId;
    boolean isFirst = true;
    boolean isInitCoversation = true;
    private List<Conversation> messageList;
    private List<String> targetList;
    private List<String> noticeIdList;
    private List<String> isTopList;
    private TextView mAddFriendName;
    private SharedPreferences msharedPreferences;
    public final static int RECEIVE_MESSAGE_FR = 0;
    public final static int RECEIVE_DISCUSSION_NOTIFICATION = 1;
    public final static int RECEIVE_DISCUSSION_MESSAGE = 2;
    private SwipeMenuListView mSwipeMenuListView;
    private MessageFragmentAdapter messageFragmentAdapter;
    private ArrayList<Message> contactsNotifications;
    private int isTopNum = 0;
    private int isTopNum2 = 0;

    //点击聊天界面
    public static final int REQ_OPEN = 1;
    //点击待办界面
    public static final int REQ_OPEN_WAIT = 2;
    //当前点击的tagid
    private String cur_click_id;
    //待办图标
    private ImageView img_wait;
    //数字提醒
    private BadgeView badgeView;
    //当前点击的tid
    private String cur_click_tid;

    //接收广播
    private ReceiverMessage receiverMessage;

    public MessageFragment() {
    }


    Handler handler = new Handler() {
        public void handleMessage(android.os.Message msg) {
            switch (msg.what) {
                //接收消息
                case 0:
                    initOrRefresAdapter(messageList);
                    break;
                case RECEIVE_DISCUSSION_MESSAGE:
                    initOrRefresAdapter(messageList);
                    break;
                case RECEIVE_DISCUSSION_NOTIFICATION:
                    initOrRefresAdapter(messageList);
                    break;
                //添加好友消息
                case 4:
                    mAddFriendName.setVisibility(View.VISIBLE);
                    String requestName = (String) msg.obj;
                    mAddFriendName.setText(requestName + "请求加你为好友");
                    badgeView.setVisibility(View.VISIBLE);
                    waitNumShow();
                    break;
                default:
                    break;
            }
        }
    };

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        registerBoradcastReceiver();
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        mContext = getActivity();
        View view = inflater.inflate(R.layout.fragment_message, null, false);

        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction("message_copy");
        receiverMessage = new ReceiverMessage(this);
        mContext.registerReceiver(receiverMessage, intentFilter);

        initView(view);
        initMessages();
        return view;
    }

    private void initOrRefresAdapter(List<Conversation> messageList) {
        if (messageFragmentAdapter == null) {
            messageFragmentAdapter = new MessageFragmentAdapter(messageList, mContext);
            mSwipeMenuListView.setAdapter(messageFragmentAdapter);
        } else {
            messageFragmentAdapter.notifyDataSetChanged();
        }
    }

    private void initMessages() {
        RongCloudContext.getInstance().init(mContext, this);
        //获取服务器消息
        RongCloudContext.getInstance().registerReceiveMessageListener();
        if (isInitCoversation) {
            isInitCoversation = false;
            getConversation();
        }
    }

    //获取本地存储消息
    private void getConversation() {
        isTopNum = 0;
        targetList.clear();
        messageList.clear();
        isTopList.clear();

        //获取本地存储消息
        RongIMClient.getInstance().getConversationList(new RongIMClient.ResultCallback<List<Conversation>>() {
            @Override
            public void onSuccess(List<Conversation> conversations) {
                if (conversations != null && conversations.size() > 0) {
                    for (int i = 0; i < conversations.size(); i++) {
                        Conversation conversation = conversations.get(i);
                        if (conversation.isTop()) {
                            isTopNum++;
                            isTopList.add(conversation.getTargetId());
                            // Log.i("TAG", "置顶置顶置顶置顶置顶置顶置顶置顶:" + conversation.getConversationTitle() + "," + isTopNum);
                        }
                        String tid = conversation.getTargetId();
                        if (tid != null && !tid.equals("") && !targetList.contains(tid)) {
                            targetList.add(tid);
                            //添加本地会话
                            addConversation(conversation);
                        }
                    }
                    waitNumShow();
                }
            }

            @Override
            public void onError(RongIMClient.ErrorCode errorCode) {

            }
        });
        isTopNum2 = isTopNum;
        //Toast.makeText(UIUtils.getContext(), "置顶:" + isTopNum, Toast.LENGTH_SHORT).show();
    }

    //添加本地会话
    private void addConversation(final Conversation conversation) {
        MessageContent message = conversation.getLatestMessage();
        if (message instanceof TextMessage || message instanceof SpaceMessage) {
            String info = null;
            if (message instanceof TextMessage) {
                TextMessage textMessage = (TextMessage) message;
                info = textMessage.getContent();
            } else if (message instanceof SpaceMessage) {
                SpaceMessage spaceMessage = (SpaceMessage) message;
                info = spaceMessage.getContent();
            }
            int messageType = -1, contentType = -1;
            String requestName = null;
            try {
                //Log.i("info", "消息=" + info);
                if (info != null && !info.equals("")) {
                    JSONObject json = new JSONObject(info);
                    messageType = json.optInt("MessageType");
                    requestName = json.optString("requestName");
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
            //普通消息
            if (messageType == 0 || messageType == 10) {
                messageList.add(conversation);
                //添加好友通知
            } else if (messageType == 1) {
                if (requestName != null) {
                    String id = conversation.getTargetId();
                    String uid = msharedPreferences.getString(Constant.ID_USER, "");
                    String name = msharedPreferences.getString(Constant.USER_NAME, "");
                    if (!id.equals(uid) && !noticeIdList.contains(id) && !name.equals(requestName)) {
                        mAddFriendName.setVisibility(View.VISIBLE);
                        mAddFriendName.setText(requestName + "请求加你为好友");
                        noticeIdList.add(conversation.getTargetId());
                        Message message1 = new Message();
                        message1.setTargetId(conversation.getTargetId());
                        message1.setContent(message);
                        message1.setConversationType(conversation.getConversationType());
                        message1.setSentTime(conversation.getSentTime());
                        message1.setReceivedTime(conversation.getReceivedTime());
                        contactsNotifications.add(message1);
                        waitNumShow();
                    }
                }
            } else if (messageType == 7) {
                String targetId = conversation.getTargetId();
                for (int i = 0; i < messageList.size(); i++) {
                    Conversation conversation1 = messageList.get(i);
                    if (conversation1.getTargetId().equals(targetId)) {
                        messageList.remove(i);
                        RongIMClient.getInstance().removeConversation(conversation.getConversationType(), targetId);
                        RongIMClient.getInstance().clearMessages(conversation.getConversationType(), targetId);
                        break;
                    }
                }
            }
        } else if (message instanceof ImageMessage) {
            messageList.add(conversation);
        }
        messageFragmentAdapter.notifyDataSetChanged();
    }

    private void initView(View view) {
        mSwipeMenuListView = (SwipeMenuListView) view.findViewById(R.id.fragment_message_listView);
        View headView = LayoutInflater.from(mContext).inflate(R.layout.list_head, null);
        mAddFriendName = (TextView) headView.findViewById(R.id.friend_request_message);
        msharedPreferences = mContext.getSharedPreferences(Constant.SHARED_PREFERENCES, Context.MODE_PRIVATE);
        mSwipeMenuListView.addHeaderView(headView);
        img_wait = (ImageView) headView.findViewById(R.id.backlog_list_icon);
        badgeView = new BadgeView(mContext);

        contactsNotifications = new ArrayList<>();
        messageList = new ArrayList<>();
        targetList = new ArrayList<>();
        noticeIdList = new ArrayList<>();
        isTopList = new ArrayList<>();
        messageFragmentAdapter = new MessageFragmentAdapter(messageList, mContext);
        mSwipeMenuListView.setAdapter(messageFragmentAdapter);
        initListView();
        registerBoradcastReceiver();
        //刷新适配器，显示headview
        initOrRefresAdapter(messageList);
    }

    private void initListView() {
        SwipeMenuCreator creator = new SwipeMenuCreator() {
            @Override
            public void create(SwipeMenu menu) {
                SwipeMenuItem deleteItem = new SwipeMenuItem(getActivity().getApplicationContext());
                deleteItem.setBackground(new ColorDrawable(Color.rgb(244, 53, 49)));
                deleteItem.setWidth(UIUtils.dip2px(60));
                deleteItem.setIcon(R.mipmap.wenzi_shanchu);
                menu.addMenuItem(deleteItem);
            }
        };

        mSwipeMenuListView.setMenuCreator(creator);
        mSwipeMenuListView.setOnMenuItemClickListener(new SwipeMenuListView.OnMenuItemClickListener() {
            @Override
            public void onMenuItemClick(final int position, SwipeMenu menu, int index) {
                switch (index) {
                    case 0:
                        //左滑，删除消息
                        final Conversation con = messageList.get(position);
                        RongIMClient.getInstance().removeConversation(con.getConversationType(), con.getTargetId(), new RongIMClient.ResultCallback<Boolean>() {
                            @Override
                            public void onSuccess(Boolean aBoolean) {
                                if (aBoolean) {
                                    messageList.remove(position);
                                    messageFragmentAdapter.notifyDataSetChanged();
                                    String id = con.getTargetId();
                                    if (targetList.contains(id)) {
                                        targetList.remove(id);
                                    }
                                }
                            }

                            @Override
                            public void onError(RongIMClient.ErrorCode errorCode) {

                            }
                        });
                        break;
                    default:
                        break;
                }
            }
        });
        // 点击，进入详情界面
        mSwipeMenuListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> arg0, View arg1, int position, long arg3) {
                if (NetWorkUtils.isNetworkAvailable(UIUtils.getContext())) {
                    if (position == 0) {
                        if (contactsNotifications != null) {
                            Intent backlog = new Intent(getActivity(), BacklogActivity.class);
                            backlog.putExtra("contactsNotifications", contactsNotifications);
                            startActivityForResult(backlog, REQ_OPEN_WAIT);
                            badgeView.setVisibility(View.INVISIBLE);
                        }
                    } else {
                        Conversation con = messageList.get(position - 1);
                        if (con == null) {
                            messageList.remove(position - 1);
                            return;
                        }
                        cur_click_id = con.getTargetId();
                        Conversation.ConversationType type = con.getConversationType();
                        if (type == Conversation.ConversationType.PRIVATE) {
                            Intent startChat = new Intent(getActivity(), ChatActivity.class);
                            startChat.putExtra("from", "MessageFragment");
                            Bundle bundle = new Bundle();
                            bundle.putParcelable("message", con);
                            startChat.putExtras(bundle);
                            startActivityForResult(startChat, REQ_OPEN);
                        } else if (type == Conversation.ConversationType.GROUP) {
                            Intent startDiscussion = new Intent(mContext, DiscussionActivity.class);
                            Bundle bundle = new Bundle();
                            bundle.putParcelable("message", con);
                            startDiscussion.putExtra("from", "MessageFragment");
                            startDiscussion.putExtras(bundle);
                            startActivityForResult(startDiscussion, REQ_OPEN);
                        }
//                        int messageType = -1;
//                        int chatType = -1;
//                        if (con.getLatestMessage() instanceof TextMessage) {
//                            TextMessage textMessage = (TextMessage) con.getLatestMessage();
//                            String info = textMessage.getContent();
//                            try {
//                                JSONObject json = new JSONObject(info);
//                                chatType = json.optInt("ChatType");
//                                messageType = json.optInt("MessageType");
//                            } catch (JSONException e) {
//                                e.printStackTrace();
//                            }
//
//                            Log.i("info", "mt=" + messageType + ", =" + chatType);
//                            if (messageType != -1 && chatType != -1) {
//                                if (messageType == 0) {
//                                    if (chatType == 0) {//单聊
//                                        Intent startChat = new Intent(getActivity(), ChatActivity.class);
//                                        startChat.putExtra("from", "MessageFragment");
//                                        Bundle bundle = new Bundle();
//                                        bundle.putParcelable("message", con);
//                                        startChat.putExtras(bundle);
//                                        startActivityForResult(startChat, REQ_OPEN);
//                                    } else if (chatType == 1) {//普通群聊
//                                        Intent startDiscussion = new Intent(mContext, DiscussionActivity.class);
//                                        Bundle bundle = new Bundle();
//                                        bundle.putParcelable("message", con);
//                                        startDiscussion.putExtra("from", "MessageFragment");
//                                        startDiscussion.putExtras(bundle);
//                                        startActivityForResult(startDiscussion, REQ_OPEN);
//                                    } else if (chatType == 2) {//空间群组
//
//                                    }
//                                }
//                            }
//                        } else {
//                            Intent startChat = new Intent(mContext, ChatActivity.class);
//                            startChat.putExtra("from", "MessageFragment");
//                            Bundle bundle = new Bundle();
//                            bundle.putParcelable("message", con);
//                            startChat.putExtras(bundle);
//                            startActivityForResult(startChat, REQ_OPEN);
//                        }
                        RongIMClient.getInstance().clearMessagesUnreadStatus(con.getConversationType(), con.getTargetId());
                        con.setUnreadMessageCount(0);
                        messageList.set(position - 1, con);
                        messageFragmentAdapter.notifyDataSetChanged();
                    }
                } else {
                    Toast.makeText(UIUtils.getContext(), "您当前没有连接网络，请连接后再重试！", Toast.LENGTH_SHORT).show();
                }
            }
        });
    }

    @Override
    public void onResume() {
        super.onResume();
        initMessages();
        MobclickAgent.onPageStart("MessageFragment");
    }

    public void registerBoradcastReceiver() {
        IntentFilter myIntentFilter = new IntentFilter();
        myIntentFilter.addAction(EmotionMainFragment.NEW_MESSAGE);
        // 注册广播
        getActivity().registerReceiver(mBroadcastReceiver, myIntentFilter);
    }

    private BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            String isTop = intent.getStringExtra("isTop");
            String updateName = intent.getStringExtra("UPDATE_NAME");
            String deleteMessages = intent.getStringExtra("deleteMessages");
            String new_message = intent.getStringExtra("new_message");
            if (new_message != null && new_message.equals("exit_group")) {   //退群
                String targetId = intent.getStringExtra("targetId");
                for (int i = 0; i < messageList.size(); i++) {
                    Conversation conversation = messageList.get(i);
                    if (conversation.getTargetId().equals(targetId)) {
                        messageList.remove(i);
                        messageFragmentAdapter.notifyDataSetChanged();
                        break;
                    }
                }
            } else if (updateName != null && updateName.equals("UPDATE_NAME")) {
                getConversation();
            } else if (deleteMessages != null && deleteMessages.equals("deleteMessages")) {
                getConversation();
            } else if (isTop != null && isTop.equals("isTop")) {
                getConversation();
            } else if (new_message != null && new_message.equals("message")) {
                Message message = intent.getExtras().getParcelable("message");
                if (message != null) {
                    getMessage(message);
                }
            }
        }
    };

    @Override
    public void getMessage(Message message) {
        if (isTopList.contains(message.getTargetId())) {
            isTopNum2 = 0;
        } else {
            isTopNum2 = isTopNum;
        }
        if (message != null && !message.getTargetId().equals("")) {
            targetId = message.getTargetId();
            int messageId = message.getMessageId();
            msharedPreferences.edit().putString("targetId", targetId).apply();
            if (message.getContent() instanceof TextMessage || message.getContent() instanceof SpaceMessage) {
                String info = null;
                if (message.getContent() instanceof TextMessage) {
                    TextMessage textMessage = (TextMessage) message.getContent();
                    info = textMessage.getContent();
                } else if (message.getContent() instanceof SpaceMessage) {
                    SpaceMessage spaceMessage = (SpaceMessage) message.getContent();
                    info = spaceMessage.getContent();
                }
                int messageType = -1;
                String requestName = null;
                try {
//                    Log.i("info", "消息=" + info);
                    if (info != null && !info.equals("")) {
                        JSONObject json = new JSONObject(info);
                        messageType = json.optInt("MessageType");
                        requestName = json.optString("requestName");
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
                //普通消息
                if (messageType == 0 || messageType == 10) {
                    String id = message.getTargetId();
                    boolean isexist = false;
                    int index = 0;
                    Conversation conversation = null;
                    for (int i = 0; i < messageList.size(); i++) {
                        conversation = messageList.get(i);
                        if (conversation.getTargetId().equals(id)) {
                            isexist = true;
                            index = i;
                            break;
                        }
                    }
                    if (isexist) {
                        int count = conversation.getUnreadMessageCount();
                        count++;
                        if (messageId == 0) {
                            conversation.setUnreadMessageCount(0);
                        } else if (message.getMessageDirection() == Message.MessageDirection.RECEIVE) {
                            if (message.getSentStatus() == Message.SentStatus.READ) {
                                conversation.setUnreadMessageCount(0);
                                RongIMClient.getInstance().clearMessagesUnreadStatus(conversation.getConversationType(), conversation.getTargetId());
                            } else {
                                conversation.setUnreadMessageCount(count);
                            }
                        }

                        conversation.setLatestMessageId(message.getMessageId());
                        conversation.setReceivedTime(System.currentTimeMillis());
                        conversation.setLatestMessage(message.getContent());
                        messageList.remove(index);
                        messageList.add(isTopNum2, conversation);
                    } else {
                        Conversation con = traMessage2Con(message);
                        if (messageId == 0) {
                            con.setUnreadMessageCount(0);
                        } else if (message.getMessageDirection() == Message.MessageDirection.RECEIVE) {
                            con.setUnreadMessageCount(1);
                        }
                        messageList.add(isTopNum2, con);
                        targetList.add(con.getTargetId());
                    }
                    handler.sendEmptyMessage(0);
                    //添加好友通知
                } else if (messageType == 1) {
                    if (requestName != null && !requestName.equals("") && !requestName.equals("null")) {
                        String id = message.getTargetId();
                        String uid = msharedPreferences.getString(Constant.ID_USER, "");
                        boolean isrequest = noticeIdList.contains(id);
                        if (!id.equals(uid) && isrequest) {
                            int index = noticeIdList.indexOf(id);
                            contactsNotifications.remove(index);
                            contactsNotifications.add(0, message);
                        } else if (!id.equals(uid) && !isrequest) {
                            contactsNotifications.add(0, message);
                            noticeIdList.add(message.getTargetId());
                        }
                        android.os.Message msg = new android.os.Message();
                        msg.what = 4;
                        msg.obj = requestName;
                        handler.sendMessage(msg);
                    }
                } else if (messageType == 7) {
                    String targetId = message.getTargetId();
                    for (int i = 0; i < messageList.size(); i++) {
                        Conversation conversation1 = messageList.get(i);
                        if (conversation1.getTargetId().equals(targetId)) {
                            messageList.remove(i);
                            RongIMClient.getInstance().removeConversation(message.getConversationType(), targetId);
                            RongIMClient.getInstance().clearMessages(message.getConversationType(), targetId);
                            PopWindowUtils.delMessage(message);
                            break;
                        }
                    }
                    handler.sendEmptyMessage(0);
                }
            } else if (message.getContent() instanceof ImageMessage) {
                ImageMessage imageMessage = (ImageMessage) message.getContent();
                String id = message.getTargetId();
                if (id != null && !id.equals("")) {
                    boolean isexist = false;
                    int index = 0;
                    Conversation conversation = null;
                    for (int i = 0; i < messageList.size(); i++) {
                        conversation = messageList.get(i);
                        if (conversation.getTargetId().equals(message.getTargetId())) {
                            index = i;
                            isexist = true;
                            break;
                        }
                    }
                    if (isexist) {
                        int count = conversation.getUnreadMessageCount();
                        count++;
                        if (message.getSentStatus() == Message.SentStatus.READ
                                && message.getMessageDirection() == Message.MessageDirection.RECEIVE) {
                            conversation.setUnreadMessageCount(0);
                            RongIMClient.getInstance().clearMessagesUnreadStatus(conversation.getConversationType(), conversation.getTargetId());
                        } else {
                            conversation.setUnreadMessageCount(count);
                        }
                        conversation.setLatestMessageId(message.getMessageId());
                        conversation.setReceivedTime(System.currentTimeMillis());
                        conversation.setLatestMessage(message.getContent());
                        messageList.remove(index);
                        messageList.add(isTopNum2, conversation);
                    } else {
                        Conversation con = traMessage2Con(message);
                        messageList.add(isTopNum2, con);
                    }
                }
                handler.sendEmptyMessage(0);
            }
        }
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        getActivity().unregisterReceiver(mBroadcastReceiver);
        mContext.unregisterReceiver(receiverMessage);
    }

    public Conversation traMessage2Con(Message msg) {
        Conversation con = new Conversation();
        con.setTargetId(msg.getTargetId());
        con.setSentTime(msg.getSentTime());
        con.setReceivedTime(System.currentTimeMillis());
        con.setConversationType(msg.getConversationType());
        con.setLatestMessage(msg.getContent());
        con.setLatestMessageId(msg.getMessageId());
        con.setUnreadMessageCount(1);
        return con;
    }

    //待办  BadgeView  数字提醒
    private void waitNumShow() {
        if (contactsNotifications != null && contactsNotifications.size() > 0) {
            badgeView.setTargetView(img_wait);
            badgeView.setGravity(Gravity.TOP | Gravity.RIGHT);
            badgeView.setBadgeCount(contactsNotifications.size());
        }
    }

    public void getData(boolean update) {
        if (update && NetWorkUtils.isNetworkAvailable(UIUtils.getContext())) {
            if (contactsNotifications == null || messageList == null || targetList == null
                    || noticeIdList == null || messageFragmentAdapter == null) {
                return;
            }
            messageFragmentAdapter.clean();
            contactsNotifications.clear();
            messageList.clear();
            targetList.clear();
            noticeIdList.clear();
            isInitCoversation = true;
            initMessages();
        }
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == 1) {
            if (requestCode == REQ_OPEN) {
                Bundle bundle = data.getExtras();
                if (bundle != null) {
                    boolean update = bundle.getBoolean("update");
                    if (update) {
                        getData(update);
                    }
                }
            } else if (requestCode == REQ_OPEN_WAIT) {
                Bundle bundle = data.getExtras();
                if (bundle != null) {
                    contactsNotifications.clear();
                    List<Message> list = (List<Message>) bundle.getSerializable("contactsNotifications");
                    contactsNotifications.addAll(list);
                }
            }
        }
    }

    @Override
    public void onPause() {
        super.onPause();
        MobclickAgent.onPageEnd("MessageFragment");
    }

    @Override
    public void sendData(Object object) {
        if (object instanceof Message) {
            Message message = (Message) object;
            if (message.getMessageDirection() == Message.MessageDirection.SEND
                    && message.getTargetId().equals(targetId)) {
                boolean ishave = false;
                Conversation con = traMessage2Con(message);
                con.setUnreadMessageCount(0);
                for (int i = 0; i < messageList.size(); i++) {
                    Conversation conversation = messageList.get(i);
                    if (conversation.getTargetId().equals(message.getTargetId())) {
                        ishave = true;
                        messageList.set(i, con);
                        break;
                    }
                }
                if (!ishave) {
                    messageList.add(0, con);
                }
                messageFragmentAdapter.notifyDataSetChanged();
            }
        }
    }
}
