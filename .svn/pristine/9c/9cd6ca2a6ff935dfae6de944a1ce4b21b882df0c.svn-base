package net.iclassmate.xydspace.ui.activity.chat;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.HorizontalScrollView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.Toast;

import com.squareup.picasso.Picasso;

import net.iclassmate.xydspace.R;
import net.iclassmate.xydspace.adapter.SeleContAdapter;
import net.iclassmate.xydspace.bean.contacts.FriendInfo;
import net.iclassmate.xydspace.constant.Constant;
import net.iclassmate.xydspace.ui.activity.constacts.GroupListActivity;
import net.iclassmate.xydspace.ui.fragment.emotion.EmotionDisFragment;
import net.iclassmate.xydspace.utils.HttpManager;
import net.iclassmate.xydspace.utils.JsonUtils;
import net.iclassmate.xydspace.utils.NetWorkUtils;
import net.iclassmate.xydspace.utils.UIUtils;
import net.iclassmate.xydspace.view.Loading;
import net.iclassmate.xydspace.view.TitleBar;
import net.iclassmate.xydspace.view.study.ShapeImageView;
import net.sourceforge.pinyin4j.PinyinHelper;
import net.sourceforge.pinyin4j.format.HanyuPinyinCaseType;
import net.sourceforge.pinyin4j.format.HanyuPinyinOutputFormat;
import net.sourceforge.pinyin4j.format.HanyuPinyinToneType;
import net.sourceforge.pinyin4j.format.HanyuPinyinVCharType;
import net.sourceforge.pinyin4j.format.exception.BadHanyuPinyinOutputFormatCombination;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

import io.rong.imlib.RongIMClient;
import io.rong.imlib.model.Conversation;
import io.rong.imlib.model.Group;
import io.rong.imlib.model.UserInfo;
import io.rong.message.TextMessage;

public class SelectContactsActivity extends Activity implements TitleBar.TitleOnClickListener, View.OnClickListener {
    private Context mContext;
    private TitleBar titleBar;
    private ListView listView;
    private List<Object> list;
    private List<FriendInfo> listMsg;
    private List<FriendInfo> listSelect;
    private List<String> userIdList;
    private List<String> userNameList;
    private List<Group> groupList;
    private SeleContAdapter adapter;
    private LinearLayout linear_select;
    private RelativeLayout relative_group;
    private HorizontalScrollView horizontalScrollView;

    private SharedPreferences sp;
    private char sortKey;
    private String userId, name;
    private String groupName;
    private String result;
    private FriendInfo friendInfo;
    private HttpManager httpManager;
    private Loading loading;
    private String from;
    public final static int FIND_FRIENDS_SUCCEED = 1;
    public final static int FIND_FRIENDS_FAIL = 2;
    public final static int CREAT_GROUP_SUCCEED = 3;
    public final static int CREAT_GROUP_FAIL = 4;
    private static final int NO_INTERNET = 0;    //没网络
    private final static int ADD_GROUP_SUCCEED = 5;
    private final static int ADD_GROUP_FAIL = 6;
    Handler mHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            switch (msg.what) {
                case FIND_FRIENDS_SUCCEED:
//                    Log.i("TAG", "获取的好友列表：" + result);
                    loading.hideLoading(false);
                    listMsg = JsonUtils.jsonFriendInfo(result);
                    if (listMsg == null) {
                        return;
                    }
                    for (int j = 0; j < listMsg.size(); j++) {
                        FriendInfo friendInfo = listMsg.get(j);
                        String remark = friendInfo.getRemark();
                        if (remark == null || remark.equals("") || remark.equals("null")) {
                            remark = friendInfo.getUserName();
                        }
                        char ch = ' ';
                        if (isEnglish(remark)) {
                            //字母
                            ch = remark.toUpperCase().charAt(0);

                        } else {
                            //中文
                            char[] c = remark.toCharArray();
                            HanyuPinyinOutputFormat format = new HanyuPinyinOutputFormat();
                            // UPPERCASE：大写  (ZHONG)LOWERCASE：小写  (zhong)
                            format.setCaseType(HanyuPinyinCaseType.UPPERCASE);
                            format.setToneType(HanyuPinyinToneType.WITH_TONE_MARK);
                            format.setVCharType(HanyuPinyinVCharType.WITH_U_UNICODE);
                            try {
                                String[] pinyin = PinyinHelper.toHanyuPinyinStringArray(c[0], format);
                                if (pinyin.length != 0) {
                                    char[] cc = pinyin[0].toCharArray();
                                    ch = cc[0];
                                }

                            } catch (BadHanyuPinyinOutputFormatCombination badHanyuPinyinOutputFormatCombination) {
                                badHanyuPinyinOutputFormatCombination.printStackTrace();
                            }
                        }
                        if (ch >= 65 && ch <= 90) {//大写字母
                            friendInfo.sortKey = ch;
                        } else {
                            friendInfo.sortKey = '#';
                        }

                        if (sortKey != friendInfo.sortKey) {
                            sortKey = friendInfo.sortKey;
                            friendInfo.isHead = true;
                        }
                        for (int k = j - 1; k >= 0; k--) {
                            if (ch == listMsg.get(k).sortKey) {
                                friendInfo.isHead = false;
                            }
                        }

                        listMsg.set(j, friendInfo);

                    }
                    for (int j = 0; j < listMsg.size(); j++) {
                        for (int k = j + 1; k < listMsg.size(); k++) {
                            FriendInfo f1 = listMsg.get(j);
                            FriendInfo f2 = listMsg.get(k);
                            if (f1.sortKey > f2.sortKey) {
                                listMsg.set(k, f1);
                                listMsg.set(j, f2);
                            }
                        }
                        FriendInfo message = listMsg.get(j);
                        if (!list.contains(message)) {
                            list.add(message);
                        }
                    }
                    adapter.notifyDataSetChanged();
//                    listView.setAdapter(adapter);
                    break;
                case FIND_FRIENDS_FAIL:
                    loading.hideLoading(false);
                    Toast.makeText(UIUtils.getContext(), "好友列表加载失败", Toast.LENGTH_SHORT).show();
                    break;
                case CREAT_GROUP_SUCCEED:
                    Log.i("TAG", "服务器返回群聊：" + result);
                    try {
                        JSONObject object = new JSONObject(result);
                        String author = object.getString("author");
                        String sessionId = object.getString("sessionId");
                        //发送广播
                       /* Intent intent=new Intent(EmotionDisFragment.NEW_MESSAGE);
                        Bundle bundle=new Bundle();
                        bundle.putParcelable("message",message);
                        intent.putExtras(bundle);
                        sendBroadcast(intent);*/
                        Group group = new Group(sessionId, groupName, null);
                        groupList.add(group);
//                        RongIMClient.getInstance().syncGroup(groupList, new RongIMClient.OperationCallback() {
//                            @Override
//                            public void onSuccess() {
//                                Toast.makeText(UIUtils.getContext(),"刷新群组成功",Toast.LENGTH_SHORT).show();
//                            }
//
//                            @Override
//                            public void onError(RongIMClient.ErrorCode errorCode) {
//                                Toast.makeText(UIUtils.getContext(),"刷新群组失败",Toast.LENGTH_SHORT).show();
//                            }
//                        });
//                        sendCmd(sessionId);
                        Intent startGroup = new Intent(UIUtils.getContext(), DiscussionActivity.class);
//                        bundle.putParcelable("discussion",discussion);
                        startGroup.putExtra("sessionId", sessionId);
                        startGroup.putExtra("sessionName", groupName);
                        startGroup.putExtra("author", author);
                        startGroup.putExtra("from", "SelectContactsActivity");
                        startActivity(startGroup);
                        if (from.equals("person")) {
                            finish();
                        }


                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    loading.hideLoading(false);
                    break;
                case CREAT_GROUP_FAIL:
                    break;

                case NO_INTERNET:
                    loading.hideLoading(false);
                    Toast.makeText(UIUtils.getContext(), "您没有连接网络，请连接后重试！", Toast.LENGTH_SHORT).show();
                    break;

                case ADD_GROUP_SUCCEED: //加入群组成功
                    loading.hideLoading(false);
                    Toast.makeText(UIUtils.getContext(), "加入群聊成功！", Toast.LENGTH_SHORT).show();
                    Intent intent = new Intent();
                    SelectContactsActivity.this.setResult(13, intent);
                    SelectContactsActivity.this.finish();
                    break;

                case ADD_GROUP_FAIL:    //加入群组失败
                    loading.hideLoading(false);
                    Toast.makeText(UIUtils.getContext(), "加入群聊失败，请重试！", Toast.LENGTH_SHORT).show();
                    break;
            }
        }
    };

    private void sendCmd(final String sessionId) {
        UserInfo userInfo = new UserInfo(sessionId, groupName, null);
        final TextMessage textMessage = TextMessage.obtain("");
        textMessage.setUserInfo(userInfo);
        RongIMClient.getInstance().sendMessage(Conversation.ConversationType.PRIVATE, sessionId, textMessage, null, null, new RongIMClient.SendMessageCallback() {
            @Override
            public void onError(Integer integer, RongIMClient.ErrorCode errorCode) {
                Toast.makeText(UIUtils.getContext(), "失败" + errorCode, Toast.LENGTH_SHORT).show();
                Log.i("TAG", "sendCmd失败");
            }

            @Override
            public void onSuccess(Integer integer) {
                Toast.makeText(UIUtils.getContext(), "成功", Toast.LENGTH_SHORT).show();
                Log.i("TAG", "sendCmd成功");
            }
        }, new RongIMClient.ResultCallback<io.rong.imlib.model.Message>() {
            @Override
            public void onSuccess(io.rong.imlib.model.Message message) {
                Intent intent = new Intent(EmotionDisFragment.NEW_MESSAGE);
                Bundle bundle = new Bundle();
                bundle.putParcelable("message", message);
                intent.putExtras(bundle);
                sendBroadcast(intent);
            }

            @Override
            public void onError(RongIMClient.ErrorCode errorCode) {

            }
        });
    }


    /**
     * 是否是英文
     *
     * @param charaString
     * @return
     */
    public static boolean isEnglish(String charaString) {
        return charaString.matches("^[a-zA-Z]*");
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_select_contacts);
        mContext = this;
        initView();
        initData();
        initListener();
    }

    private void initView() {
        titleBar = (TitleBar) findViewById(R.id.select_contacts_title_bar);

        titleBar.setLeftIcon(R.mipmap.ic_fanhui, "取消");
        titleBar.setRightIcon("确定");
        titleBar.setTitle("选择联系人");
        titleBar.setTitleClickListener(this);
        listView = (ListView) findViewById(R.id.sele_cont_listview);
        linear_select = (LinearLayout) findViewById(R.id.sele_cont_container_linear);
        relative_group = (RelativeLayout) findViewById(R.id.sele_cont_group);
        horizontalScrollView = (HorizontalScrollView) findViewById(R.id.sele_cont_horizontalscrollview);
        loading = new Loading(findViewById(R.id.loading_layout), (RelativeLayout) findViewById(R.id.sele_noLoading));

        httpManager = new HttpManager();
        sp = mContext.getSharedPreferences(Constant.SHARED_PREFERENCES, Context.MODE_PRIVATE);
        list = new ArrayList<>();
        listMsg = new ArrayList<>();
        listSelect = new ArrayList<>();
        groupList = new ArrayList<>();
        adapter = new SeleContAdapter(this, list);
        listView.setAdapter(adapter);
        adapter.setImgCheckImg(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                int index = (int) view.getTag();
                Object object = list.get(index);
                if (object instanceof FriendInfo) {
                    FriendInfo message = (FriendInfo) object;
                    message.check = !message.check;
                    list.set(index, message);
                    adapter.notifyDataSetChanged();
                    getSelectCount();
                }
            }
        });
    }

    private void initData() {
        userId = sp.getString(Constant.ID_USER, "");
        name = sp.getString("name", "");
        loading.showLoading(false);
        if (!userId.equals("")) {
            new Thread(new Runnable() {
                @Override
                public void run() {
                    result = httpManager.findAllFriends(userId);
                    if (result == null || result.equals("404")) {
                        mHandler.sendEmptyMessage(FIND_FRIENDS_FAIL);
                    } else {
                        mHandler.sendEmptyMessage(FIND_FRIENDS_SUCCEED);
                    }
                }
            }).start();
        }

    }

    private void initListener() {
        relative_group.setOnClickListener(this);
    }

    private void getSelectCount() {
        listSelect.clear();
        int count = 0;
        for (int i = 0; i < list.size(); i++) {
            Object object = list.get(i);
            if (object instanceof FriendInfo) {
                FriendInfo message = (FriendInfo) object;
                if (message.check) {
                    count++;
                    listSelect.add(message);
                }
            }
        }
        if (count == 0) {
            titleBar.setRightIcon("确定");
            linear_select.setVisibility(View.GONE);
        } else if (count > 0) {
            titleBar.setRightIcon("确定(" + count + ")");
            linear_select.setVisibility(View.VISIBLE);
        }
        linear_select.removeAllViews();
        for (int i = 0; i < listSelect.size(); i++) {
            String url = "http://123.56.224.241:10000/fs/api/v1/" + listSelect.get(i).getFriendId() + "/getImage/0";
            View view = LayoutInflater.from(this).inflate(R.layout.tra_fri_select_linear_item, null);
            ShapeImageView img = (ShapeImageView) view.findViewById(R.id.tra_fri_select_img);
            Picasso.with(this).load(url).resize(106, 106).into(img);
//            view.setTag(url);
         /*   if (url != null && !url.equals("")) {
                String icon = BitmapUtils.getImageUrl(url);
                Bitmap bitmap = BitmapUtils.stringtoBitmap(icon);
                img.setImageBitmap(bitmap);
            }*/
            linear_select.addView(view);
        }

        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                horizontalScrollView.smoothScrollBy(Integer.MAX_VALUE / 4, 0);
            }
        }, 200);
    }


    @Override
    public void leftClick() {
        close();
    }

    private void close() {
        Intent intent = new Intent();
        setResult(RESULT_OK, intent);
        finish();
    }

    @Override
    public void onBackPressed() {
        close();
    }

    @Override
    public void rightClick() {
        loading.showLoading(false);
        if (listSelect.size() >= 1) {
            from = getIntent().getStringExtra("from");
            Boolean create = false;
            userIdList = new ArrayList<String>();
            userNameList = new ArrayList<>();

            for (int i = 0; i < listSelect.size(); i++) {
                userIdList.add(listSelect.get(i).getFriendId());
                userNameList.add(listSelect.get(i).getUserName());
            }
            Log.i("TAG", "创建群组的人数是：" + userNameList.size());
//            groupName = listSelect.get(0).getUserName() + "、" + listSelect.get(1).getUserName() + "...(" + listSelect.size() + ")";

            if (from.equals("newGroup"))     //创建新群组
            {
                if (listSelect.size() == 1)      //选一个人时跳到单聊
                {
                    Intent toSingleChat = new Intent(UIUtils.getContext(), ChatActivity.class);
                    toSingleChat.putExtra("from", "SelectContactsActivity");
                    toSingleChat.putExtra("targetId", listSelect.get(0).getFriendId());
                    toSingleChat.putExtra("type", Conversation.ConversationType.PRIVATE);
                    toSingleChat.putExtra("name", sp.getString("name", ""));
                    startActivity(toSingleChat);
                    finish();
                } else                           //选了一人以上时创建群组
                {
                    userNameList.add(0, name);
                    userIdList.add(0, userId);
                    groupName = name + "、" + listSelect.get(0).getUserName() + "、" + listSelect.get(1).getUserName() + "...(" + listSelect.size() + 1 + ")";
                    create = true;
                }
            } else if (from.equals("person")) //由单聊通过加人变为群组
            {
                userNameList.add(0, name);
                userIdList.add(0, userId);
                String friendId = getIntent().getStringExtra("friendId");
                String friendName = getIntent().getStringExtra("friendName");
                userNameList.add(friendName);
                userIdList.add(friendId);
                groupName = friendName + "、" + name + "、" + listSelect.get(0).getUserName() + "...(" + userNameList.size() + ")";
                create = true;
            } else if (from.equals("group"))  //已有的群组加人
            {
                create = false;
                userId = getIntent().getStringExtra("targetId");
                name = getIntent().getStringExtra("sessionName");
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        if (NetWorkUtils.isNetworkAvailable(UIUtils.getContext())) {
                            result = null;
                            result = httpManager.addGroup(userId, name, userIdList, userNameList);
                            if (result.equals("404")) {
                                mHandler.sendEmptyMessage(ADD_GROUP_FAIL);
                            } else {
                                mHandler.sendEmptyMessage(ADD_GROUP_SUCCEED);
                            }
                        } else {
                            mHandler.sendEmptyMessage(NO_INTERNET);
                        }
                    }
                }).start();
            }

            //创建群组
            if (create) {
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        result = null;
                        result = httpManager.creatGroup(userId, "", groupName, userIdList, userNameList);
                        if (result.equals("404")) {
                            mHandler.sendEmptyMessage(CREAT_GROUP_FAIL);
                        } else {
                            mHandler.sendEmptyMessage(CREAT_GROUP_SUCCEED);
                        }
                    }
                }).start();
            }

        } else {
            Toast.makeText(UIUtils.getContext(), "请选择好友", Toast.LENGTH_SHORT).show();
        }
    }

    @Override
    public void titleClick() {

    }

    @Override
    public void innerleftClick() {

    }

    @Override
    public void innerRightClick() {

    }

    @Override
    public void onClick(View v) {
        if (v.getId() == R.id.sele_cont_group) {
            Intent toGroup = new Intent(UIUtils.getContext(), GroupListActivity.class);
            startActivity(toGroup);
        }
    }
}


